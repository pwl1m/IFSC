import pytest
from carteira_cliente import CarteiraCliente 
# -v para verbose

# Teste de inicialização da carteira
@pytest.fixture
def carteira():
    return CarteiraCliente("12345", 100)
    
def test_inicializacao_carteira(carteira):
    assert carteira.numero_carteira == "12345"
    assert carteira.saldo == 100

# Teste de adição de saldo
def test_adicionar_saldo(carteira):
    carteira.adicionar_saldo(50)
    assert carteira.saldo == 150

def test_adicionar_saldo_invalido(carteira):
    carteira.adicionar_saldo(-50)
    assert str(assert_error.value) == "Não é possível adicionar um valor negativo."
    assert carteira.consultar_saldo() == 100

# teste de valor positivo
def test_check_number_positive(carteira):
    with pytest.raises(Exception) as assert_error:
        carteira.check_positive_number(-50)
    assert str(assert_error.value) == "Valor inválido."
    
# Teste de saque
def test_sacar_saldo_suficiente(carteira):
    resultado = carteira.sacar(50)
    assert resultado == True
    assert carteira.saldo == 50

def test_sacar_saldo_insuficiente(carteira):
    resultado = carteira.sacar(150)
    assert resultado == False
    assert carteira.saldo == 100  # O saldo não deve mudar

# Teste de consulta de saldo
def test_consultar_saldo(carteira):
    saldo = carteira.consultar_saldo()
    assert saldo == 100

# Teste combinado
def test_operacoes_combinadas(carteira):
    carteira.adicionar_saldo(50)
    resultado = carteira.sacar(75)
    assert resultado == True
    assert carteira.saldo == 75

def test_operacoes_combinadas_saldo_insuficiente(carteira):
    carteira.adicionar_saldo(50)
    resultado = carteira.sacar(175)
    assert resultado == False
    assert carteira.saldo == 150
    
# Teste de exceção
def test_adicionar_saldo_invalido(carteira):
    with pytest.raises(Exception) as assert_error:
        carteira.adicionar_saldo(-50)
    assert str(assert_error.value) == "Valor inválido."

if __name__ == "__main__":
    pytest.main()